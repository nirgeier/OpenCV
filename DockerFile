FROM consol/ubuntu-xfce-vnc

# Switch to root user to install additional software
USER 0

RUN apt-get update \
  && apt-get install -y \
  build-essential \
  cmake \
  git \
  wget \
  unzip \
  yasm \
  pkg-config \
  libswscale-dev \
  libtbb2 \
  libtbb-dev \
  libjpeg-dev \
  libpng-dev \
  libtiff-dev \
  libavformat-dev \
  libpq-dev \
  python3-dev \
  python-pip \
  && rm -rf /var/lib/apt/lists/*

RUN pip install numpy

WORKDIR /
ENV OPENCV_VERSION="4.1.0"
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip 
RUN unzip ${OPENCV_VERSION}.zip 
RUN mkdir /opencv-${OPENCV_VERSION}/cmake_binary 
RUN cd /opencv-${OPENCV_VERSION}/cmake_binary 
RUN cmake -DBUILD_TIFF=ON \
  -DBUILD_opencv_java=OFF \
  -DWITH_CUDA=OFF \
  -DWITH_OPENGL=ON \
  -DWITH_OPENCL=ON \
  -DWITH_IPP=ON \
  -DWITH_TBB=ON \
  -DWITH_EIGEN=ON \
  -DWITH_V4L=ON \
  -DBUILD_TESTS=OFF \
  -DBUILD_PERF_TESTS=OFF \
  -DCMAKE_BUILD_TYPE=RELEASE \
  -DCMAKE_INSTALL_PREFIX=$(python3.7 -c "import sys; print(sys.prefix)") \
  -DPYTHON_EXECUTABLE=$(which python3.7) \
  -DPYTHON_INCLUDE_DIR=$(python3.7 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
  -DPYTHON_PACKAGES_PATH=$(python3.7 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
  .. \
  RUN make install 
RUN rm /${OPENCV_VERSION}.zip 
RUN rm -r /opencv-${OPENCV_VERSION}
RUN ln -s \
  /usr/local/python/cv2/python-3.7/cv2.cpython-37m-x86_64-linux-gnu.so \
  /usr/local/lib/python3.7/site-packages/cv2.so

WORKDIR /
RUN wget -O people-counting-opencv.zip http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiNDc2ODQyOSIsImRlbGl2ZXJ5X2lkIjoiNjg2MzY0MDM0OSIsInVybCI6Imh0dHA6Ly9weWltZy5jby96c2Y4Yj9fX3M9b2RmenRkdWttcWd1cHF6enFjdGIifQ \
  && unzip people-counting-opencv.zip
# COPY setup.sh /tmp
# RUN chmod +x /tmp/setup.sh  
# RUN apt-get update 
# RUN apt-get upgrade -y
# RUN apt-get install -y build-essential cmake unzip pkg-config libjpeg-dev libpng-dev libtiff-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev libgtk-3-dev libatlas-base-dev gfortran python3-dev python-pip
# RUN cd ~
# RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.0.0.zip
# RUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.0.0.zip
# RUN wget -O people-counting-opencv.zip http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiNDc2ODQyOSIsImRlbGl2ZXJ5X2lkIjoiNjg2MzY0MDM0OSIsInVybCI6Imh0dHA6Ly9weWltZy5jby96c2Y4Yj9fX3M9b2RmenRkdWttcWd1cHF6enFjdGIifQ
# RUN unzip opencv.zip
# RUN unzip opencv_contrib.zip
# RUN mv opencv-4.0.0 opencv
# RUN mv opencv_contrib-4.0.0 opencv_contrib
# RUN wget https://bootstrap.pypa.io/get-pip.py
# RUN python3 get-pip.py
# RUN pip install virtualenv virtualenvwrapper
# RUN rm -rf ~/get-pip.py ~/.cache/pip
# RUN dpkg-reconfigure dash
# RUN echo "\n# virtualenv and virtualenvwrapper" >> ~/.bashrc
# RUN echo "export WORKON_HOME=$HOME/.virtualenvs" >> ~/.bashrc
# RUN echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" >> ~/.bashrc
# RUN echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
# SHELL ["/bin/bash", "-c"]
# RUN cat ~/.bashrc 
# RUN source ~/.bashrc

# SHELL ["/bin/bash", "-c"]
# RUN workon cv

# RUN pip install numpy
# RUN cd ~/opencv
# RUN mkdir build
# RUN cd build
# RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
#   -D CMAKE_INSTALL_PREFIX=/usr/local \
#   -D INSTALL_PYTHON_EXAMPLES=ON \
#   -D INSTALL_C_EXAMPLES=OFF \
#   -D OPENCV_ENABLE_NONFREE=ON \
#   -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
#   -D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \
#   -D BUILD_EXAMPLES=ON ..
# RUN make -j4	
# RUN make install
# RUN ldconfig
# RUN workon cv
# RUN python --version

