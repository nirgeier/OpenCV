##################################
### Open cv
##################################
FROM ubuntuVNC

ENV OPENCV_VERSION="4.1.0"

# Switch to root user to install additional software
USER 0

SHELL ["/bin/bash", "-c"]
# RUN echo $SHELL
RUN apt-get update \
  && apt-get upgrade -y \
  && apt-get autoremove -y

# developer tools
RUN apt-get install -y \
  build-essential \
  cmake \
  unzip \
  pkg-config 

# image and video I/O libraries
RUN apt-get install -y \
  libjpeg-dev \
  libpng-dev \
  libtiff-dev \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  libv4l-dev \
  libxvidcore-dev \
  libx264-dev

# install GTK for our GUI backend
RUN apt-get install -y libgtk-3-dev

# mathematical optimizations for OpenCV
RUN apt-get install -y \
  libatlas-base-dev \
  gfortran

# Python 3 development headers
RUN apt-get install -y python3-dev

# Configure your Python 3 virtual environment for OpenCV 4
RUN wget https://bootstrap.pypa.io/get-pip.py
RUN python3 get-pip.py

RUN pip install virtualenv virtualenvwrapper numpy
RUN rm -rf ~/get-pip.py ~/.cache/pip

SHELL ["/bin/bash", "-c"]

RUN echo -e "\n# virtualenv and virtualenvwrapper" >> ~/.bashrc
RUN echo "export WORKON_HOME=$HOME/.virtualenvs" >> ~/.bashrc
RUN echo "export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3" >> ~/.bashrc
RUN echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc

RUN echo "Install noVNC - HTML5 based VNC viewer"
RUN mkdir -p $HOME/novnc/utils/websockify 
# && wget -qO- https://github.com/novnc/noVNC/archive/v1.0.0.tar.gz | tar xz --strip 1 -C $HOME/novnc \
# # use older version of websockify to prevent hanging connections on offline containers, see https://github.com/ConSol/docker-headless-vnc-container/issues/50
# && wget -qO- https://github.com/novnc/websockify/archive/v0.6.1.tar.gz | tar xz --strip 1 -C $HOME/novnc/utils/websockify \
# && chmod +x -v $HOME/novnc/utils/*.sh \
# ## create index.html to forward automatically to `vnc_lite.html`
# && ln -s $HOME/novnc/vnc_lite.html $HOME/novnc/index.html

# RUN  wget -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
#   && wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \
#   && unzip opencv.zip \
#   && unzip opencv_contrib.zip \
#   && mv opencv-4.1.0 opencv \
#   && mv opencv_contrib-4.1.0 opencv_contrib \

#   RUN source ~/.bashrc \
#   && mkvirtualenv cv --python=/usr/bin/python3 \
#   && workon cv \ 
#   && cd ~/opencv  \
#   && mkdir build \
#   && cd build \
#   && cmake \
#   -D CMAKE_BUILD_TYPE=RELEASE \
#   -D CMAKE_INSTALL_PREFIX=/usr/local \
#   -D INSTALL_PYTHON_EXAMPLES=OFF \
#   -D INSTALL_C_EXAMPLES=OFF \
#   -D OPENCV_ENABLE_NONFREE=ON \
#   -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
#   -D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \
#   -D BUILD_EXAMPLES=OFF .. 
# # && make -j1 \
# # && make install \
# # && ldconfig \ 
# # && workon cv \ 
# # && ls /usr/local/python/cv2/python-3.5 \
# # && cv2.cpython-35m-x86_64-linux-gnu.so \
# # && cd /usr/local/python/cv2/python-3.5 \
# # && mv cv2.cpython-35m-x86_64-linux-gnu.so cv2.so \
# # && cd ~/.virtualenvs/cv/lib/python3.5/site-packages/ \
# # && ln -s /usr/local/python/cv2/python-3.5/cv2.so cv2.so \ 
# # && workon cv
